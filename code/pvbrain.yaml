esphome:
  name: pvbrain
  # platformio_options:
  #   build_flags:
  #     - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=32768  # 16384 # 8192 # 16384
  #   platform_packages:
  #     - framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.2
  #   platform:
  #     - https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream

esp32:
  board: esp32dev
  framework:
    type: arduino
    # version: latest # 2.0.0

external_components:
  - source: github://syssi/esphome-jk-bms@main
    refresh: 0s
  - source: github://syssi/esphome-pipsolar@pip8048
    refresh: 0s
  # - source: my_components
  #   components: [pipsolar]
  #   refresh: 0s
  # - source: github://pr#5218
  #   components: [wk2132]
  #   refresh: 0s

# Enable logging
logger:
#   baud_rate: 0

# Enable Home Assistant API
api:

ota:
  password: "e24f57bcac31a2b3eca8da4c217185fc"

wifi:
  ssid: !secret esphome_ssid
  password: !secret esphome_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "pvbrain Fallback Hotspot"
    password: "sebydocky"

# mqtt:
  # broker: 192.168.1.2
  # port: 1883
  # username: mosquitto
  # password: mosquitto
  # discovery: false
  # discovery_retain: false

captive_portal:

globals:
  - id: pvbrain_grid_veille_global
    type: float
    restore_value: true

  - id: pvbrain_solar_veille_global
    type: float
    restore_value: true

  - id: pvbrain_axpert_PV_power_total_veille_global
    type: float
    restore_value: true

  - id: pvbrain_axpert_ac_output_active_power_veille_global
    type: float
    restore_value: true

  - id: pvbrain_jkbms_battery_charging_power_veille_global
    type: float
    restore_value: true

  - id: pvbrain_jkbms_battery_discharging_power_veille_global
    type: float
    restore_value: true
  
  # - id: pvbrain_jkbms2_battery_charging_power_veille_global
  #   type: float
  #   restore_value: true

  # - id: pvbrain_jkbms2_battery_discharging_power_veille_global
  #   type: float
  #   restore_value: true

time:
  platform: sntp
  id: my_time

  on_time:
    - seconds: 59
      minutes: 59
      hours: 23
      then:

        - globals.set:
            id: pvbrain_grid_veille_global
            value: !lambda return (id(pvbrain_grid_veille_global) = id(pvbrain_grid_puissance_du_jour).state);

        - globals.set:
            id: pvbrain_solar_veille_global
            value: !lambda return (id(pvbrain_solar_veille_global) = id(pvbrain_solar_puissance_du_jour).state);

        - globals.set:
            id: pvbrain_axpert_PV_power_total_veille_global
            value: !lambda return (id(pvbrain_axpert_PV_power_total_veille_global) = id(pvbrain_axpert_PV_power_total_du_jour).state);

        - globals.set:
            id: pvbrain_axpert_ac_output_active_power_veille_global
            value: !lambda return (id(pvbrain_axpert_ac_output_active_power_veille_global) = id(pvbrain_axpert_ac_output_active_power_total_du_jour).state);

        - globals.set:
            id: pvbrain_jkbms_battery_charging_power_veille_global
            value: !lambda return (id(pvbrain_jkbms_battery_charging_power_veille_global) = id(pvbrain_jkbms_battery_charging_power_total_du_jour).state);

        - globals.set:
            id: pvbrain_jkbms_battery_discharging_power_veille_global
            value: !lambda return (id(pvbrain_jkbms_battery_discharging_power_veille_global) = id(pvbrain_jkbms_battery_discharging_power_total_du_jour).state);

        # - globals.set:
        #     id: pvbrain_jkbms2_battery_charging_power_veille_global
        #     value: !lambda return (id(pvbrain_jkbms2_battery_charging_power_veille_global) = id(pvbrain_jkbms2_battery_charging_power_total_du_jour).state);

        # - globals.set:
        #     id: pvbrain_jkbms2_battery_discharging_power_veille_global
        #     value: !lambda return (id(pvbrain_jkbms2_battery_discharging_power_veille_global) = id(pvbrain_jkbms2_battery_discharging_power_total_du_jour).state);

####################### UART #######################

uart:
 ######### UART for the JKBMS ######
  - id: uart_0
    tx_pin: GPIO01
    rx_pin: GPIO03
    baud_rate: 115200
    rx_buffer_size: 384
  ######### UART for PIPsolar ######
  - id: uart_1
    tx_pin: GPIO16
    rx_pin: GPIO17
    baud_rate: 2400
  ######### UART for the PZEMs ######
  - id: uart_2
    tx_pin: GPIO19
    rx_pin: GPIO18
    baud_rate: 9600
    stop_bits: 2

######################### DEVICES UART/MODBUS based ###################

jk_modbus:
  - id: modbus1
    uart_id: uart_0
  # - id: jkbms_0
  #   uart_id: uart_00
  # - id: jkbms_1
  #   uart_id: uart_01
jk_bms:
  - id: bms1
    jk_modbus_id: modbus1
  # - id: bms_0
  #   jk_modbus_id: jkbms_0
  # - id: bms_1
  #   jk_modbus_id: jkbms_1

    
pipsolar:
  uart_id: uart_1
  id: pip8048
  # update_interval: 5s

modbus:
  id: modbus2
  uart_id: uart_2

########################### I2C bus  ##################

i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true
  frequency: 50kHz
  id: bus_i2c
  # - id: bus_i2c
  #   sda: GPIO21
  #   scl: GPIO22
  #   scan: true
  #   frequency: 50kHz
  
  # - id: bus_b
  #   sda: 01
  #   scl: 03
  #   scan: True
  #   frequency: 800kHz

pcf8574:
  - id: pvbrain_hub
    address: 0x20
    pcf8575: true

# wk2132:
#   - address: 0x70
#     id: uart_bridge0
#     i2c_id: bus_b
#     uart:
#       - uart_id: uart_00
#         channel: 0
#         baud_rate: 115200

#         #parity: even
#       - uart_id: uart_01
#         channel: 1
#         baud_rate: 115200

# ads1115:
  # - address: 0x48
    # continuous_mode: false

output:
  - platform: pipsolar
    pipsolar_id: pip8048
    battery_bulk_voltage:
      id: pvbrain_axpert_battery_bulk_voltage_set
      possible_values:
        - 52.0
        - 52.1
        - 52.2
        - 52.3
        - 52.4
        - 52.5
        - 52.6
        - 52.7
        - 52.8
        - 52.9
        - 53.0
        - 53.1
        - 53.2
        - 53.3
        - 53.4
        - 53.5
        - 53.6
        - 53.7
        - 53.8
        - 53.9
        - 54.0
        - 54.1
        - 54.2
        - 54.3
        - 54.4
        - 54.5
        - 54.6
        - 54.7
        - 54.8
        - 54.9
        - 55.0
        - 55.1
        - 55.2
        - 55.3
        - 55.4
        - 55.5
        - 55.6
        - 55.7
        - 55.8
        - 55.9
        - 56.0
        - 56.1
        - 56.2
        - 56.3
        - 56.4
        - 56.5
        - 56.6
        - 56.7
        - 56.8
        - 56.9
        - 57.0
        - 57.1
        - 57.2
        - 57.3
        - 57.4
        - 57.5
        - 57.6
        - 57.7
        - 57.8
        - 57.9
        - 58.0
        - 58.1
        - 58.2
        - 58.3
        - 58.4
        - 58.5
        - 58.6
        - 58.7
        - 58.8
        - 58.9

  - platform: pipsolar
    pipsolar_id: pip8048
    battery_float_voltage:
      id: pvbrain_axpert_battery_float_voltage_set
      possible_values:
        - 52.0
        - 52.1
        - 52.2
        - 52.3
        - 52.4
        - 52.5
        - 52.6
        - 52.7
        - 52.8
        - 52.9
        - 53.0
        - 53.1
        - 53.2
        - 53.3
        - 53.4
        - 53.5
        - 53.6
        - 53.7
        - 53.8
        - 53.9
        - 54.0
        - 54.1
        - 54.2
        - 54.3
        - 54.4
        - 54.5
        - 54.6
        - 54.7
        - 54.8
        - 54.9
        - 55.0
        - 55.1
        - 55.2
        - 55.3
        - 55.4
        - 55.5
        - 55.6
        - 55.7
        - 55.8
        - 55.9
        - 56.0
        - 56.1
        - 56.2
        - 56.3
        - 56.4
        - 56.5
        - 56.6
        - 56.7
        - 56.8
        - 56.9
        - 57.0
        - 57.1
        - 57.2
        - 57.3
        - 57.4
        - 57.5
        - 57.6
        - 57.7
        - 57.8
        - 57.9
        - 58.0
        - 58.1
        - 58.2
        - 58.3
        - 58.4
        - 58.5
        - 58.6
        - 58.7
        - 58.8
        - 58.9

  - platform: pipsolar
    pipsolar_id: pip8048
    current_max_charging_current:
      id: pvbrain_axpert_current_max_charging_current_set
      possible_values:
        - 5
        - 10
        - 15
        - 20
        - 25
        - 30
        - 35
        - 40
        - 45
        - 50
        - 55
        - 60
        - 65
        - 70
        - 75
        - 80

  - platform: pipsolar
    pipsolar_id: pip8048
    battery_under_voltage:
      id: pvbrain_axpert_battery_under_voltage_set
      possible_values:
        - 40.0
        - 40.1
        - 40.2
        - 40.3
        - 40.4
        - 40.5
        - 40.6
        - 40.7
        - 40.8
        - 40.9
        - 41.0
        - 41.1
        - 41.2
        - 41.3
        - 41.4
        - 41.5
        - 41.6
        - 41.7
        - 41.8
        - 41.9
        - 42.0
        - 42.1
        - 42.2
        - 42.3
        - 42.4
        - 42.5
        - 42.6
        - 42.7
        - 42.8
        - 42.9
        - 43.0
        - 43.1
        - 43.2
        - 43.3
        - 43.4
        - 43.5
        - 43.6
        - 43.7
        - 43.8
        - 43.9
        - 44.0
        - 44.1
        - 44.2
        - 44.3
        - 44.4
        - 44.5
        - 44.6
        - 44.7
        - 44.8
        - 44.9
        - 45.0
        - 45.1
        - 45.2
        - 45.3
        - 45.4
        - 45.5
        - 45.6
        - 45.7
        - 45.8
        - 45.9
        - 46.0
        - 46.1
        - 46.2
        - 46.3
        - 46.4
        - 46.5
        - 46.6
        - 46.7
        - 46.8
        - 46.9
        - 47.0
        - 47.1
        - 47.2
        - 47.3
        - 47.4
        - 47.5
        - 47.6
        - 47.7
        - 47.8
        - 47.9

  - platform: pipsolar
    pipsolar_id: pip8048
    battery_recharge_voltage:
      id: pvbrain_axpert_battery_recharge_voltage_set
      possible_values:
        - 52.0
        - 52.1
        - 52.2
        - 52.3
        - 52.4
        - 52.5
        - 52.6
        - 52.7
        - 52.8
        - 52.9
        - 53.0
        - 53.1
        - 53.2
        - 53.3
        - 53.4
        - 53.5
        - 53.6
        - 53.7
        - 53.8
        - 53.9
        - 54.0
        - 54.1
        - 54.2
        - 54.3
        - 54.4
        - 54.5
        - 54.6
        - 54.7
        - 54.8
        - 54.9
        - 55.0
        - 55.1
        - 55.2
        - 55.3
        - 55.4
        - 55.5
        - 55.6
        - 55.7
        - 55.8
        - 55.9
        - 56.0
        - 56.1
        - 56.2
        - 56.3
        - 56.4
        - 56.5
        - 56.6
        - 56.7
        - 56.8
        - 56.9
        - 57.0
        - 57.1
        - 57.2
        - 57.3
        - 57.4
        - 57.5
        - 57.6
        - 57.7
        - 57.8
        - 57.9
        - 58.0
        - 58.1
        - 58.2
        - 58.3
        - 58.4
        - 58.5
        - 58.6
        - 58.7
        - 58.8
        - 58.9

number:

  ######### Seuils Axpert ########

  - platform: template
    name: pvbrain_axpert_battery_bulk_voltage_number
    id: pvbrain_axpert_battery_bulk_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 52
    max_value: 58.9
    step: 0.1
    initial_value: 54.8
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: pvbrain_axpert_battery_bulk_voltage_set
            value: !lambda return id(pvbrain_axpert_battery_bulk_voltage_number).state;

  - platform: template
    name: pvbrain_axpert_battery_float_voltage_number
    id: pvbrain_axpert_battery_float_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 52
    max_value: 58.9
    step: 0.1
    initial_value: 54
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: pvbrain_axpert_battery_float_voltage_set
            value: !lambda return id(pvbrain_axpert_battery_float_voltage_number).state;

  - platform: template
    name: pvbrain_axpert_current_max_charging_current_number
    id: pvbrain_axpert_current_max_charging_current_number
    optimistic: true
    unit_of_measurement: 'A'
    icon: mdi:current-dc
    min_value: 00
    max_value: 80
    step: 10
    initial_value: 10
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: pvbrain_axpert_current_max_charging_current_set
            value: !lambda return id(pvbrain_axpert_current_max_charging_current_number).state;

  - platform: template
    name: pvbrain_axpert_battery_under_voltage_number
    id: pvbrain_axpert_battery_under_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 40
    max_value: 48
    step: 0.1
    initial_value: 44
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: pvbrain_axpert_battery_under_voltage_set
            value: !lambda return id(pvbrain_axpert_battery_under_voltage_number).state;

  - platform: template
    name: pvbrain_axpert_battery_recharge_voltage_number
    id: pvbrain_axpert_battery_recharge_voltage_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 52
    max_value: 58.9
    step: 0.1
    initial_value: 52
    restore_value: true
    mode: 'slider'
    on_value:
      then:
        - output.pipsolar.set_level:
            id: pvbrain_axpert_battery_recharge_voltage_set
            value: !lambda return id(pvbrain_axpert_battery_recharge_voltage_number).state;

  ######### Seuils Automatic Switch Transfert ########

  - platform: template
    name: pvbrain_inverseur_tension_bascule_solar_to_grid_number
    id: pvbrain_inverseur_tension_bascule_solar_to_grid_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 45
    max_value: 52
    step: 0.1
    initial_value: 49.5
    restore_value: true
    mode: 'slider'

  - platform: template
    name: pvbrain_inverseur_tension_bascule_grid_to_solar_number
    id: pvbrain_inverseur_tension_bascule_grid_to_solar_number
    optimistic: true
    unit_of_measurement: 'V'
    icon: mdi:sine-wave
    min_value: 48
    max_value: 56
    step: 0.1
    initial_value: 51
    restore_value: true
    mode: 'slider'
    
binary_sensor:
  - platform: status
    name: "pvbrain_status"

  - platform: gpio
    pin: GPIO14
    name: pvbrain_grid_230V
    id: pvbrain_grid_230V
    filters:
      - invert:
      - delayed_off: 100ms

  - platform: gpio
    pin: GPIO13
    name: pvbrain_pv_230V
    id: pvbrain_pv_230V
    filters:
      - invert:
      - delayed_off: 100ms

  - platform: pipsolar
    pipsolar_id: pip8048
    # add_sbu_priority_version:
      # name: "pvbrain_axpert_add_sbu_priority_version"
    configuration_status:
      name: "pvbrain_axpert_configuration_status"
#    scc_firmware_version:
#      name: "${name} scc_firmware_version"
    load_status:
      name: "pvbrain_axpert_load_status"
    # battery_voltage_to_steady_while_charging:
      # name: "pvbrain_axpert_battery_voltage_to_steady_while_charging"
    charging_status:
      name: "pvbrain_axpert_charging_status"
    scc_charging_status:
      name: "pvbrain_axpert_scc_charging_status"
    ac_charging_status:
      name: "pvbrain_axpert_ac_charging_status"
    # charging_to_floating_mode:
      # name: "pvbrain_axpert_charging_to_floating_mode"
    switch_on:
      name: "pvbrain_axpert_switch_on"
      id: pvbrain_axpert_switch_on
    power_saving:
      name: "pvbrain_axpert_power_saving"

  - platform: jk_bms
    charging:
      name: "pvbrain_jkbms charging"
    discharging:
      name: "pvbrain_jkbms discharging"
    balancing:
      name: "pvbrain_jkbms balancing"

  - platform: template
    name: "pvbrain_axpert_grid_input_on"
    id: pvbrain_axpert_grid_input_on
    lambda: |-
      if (id(pvbrain_axpert_grid_voltage).state > 0) {
        // Grid is connected
        return true;
      }
      // Grid is disconnected
      return false;

  - platform: jk_bms
    # jk_bms_id: bms_0
    jk_bms_id: bms1
    charging:
      name: "pvbrain_jkbms charging"
    discharging:
      name: "pvbrain_jkbms discharging"
    balancing:
      name: "pvbrain_jkbms balancing"

  # - platform: jk_bms
  #   jk_bms_id: bms_1
  #   charging:
  #     name: "pvbrain_jkbms2 charging"
  #   discharging:
  #     name: "pvbrain_jkbms2 discharging"
  #   balancing:
  #     name: "pvbrain_jkbms2 balancing"

button:
  - platform: template
    name: "pvbrain_grid_reset_energy"
    on_press:
      then:
        - pzemac.reset_energy: pvbrain_pzem_grid

  - platform: template
    name: "pvbrain_solar_reset_energy"
    on_press:
      then:
        - pzemac.reset_energy: pvbrain_pzem_solar

#########   GRID-TIRED or OFF-GRID #####
#  - platform: template
#    name: pvbrain_mode_EDF
#    id: pvbrain_mode_EDF
#    icon: "mdi:transmission-tower-import"
#    on_press:
#      then:
#        - switch.turn_off: pvbrain_ats_automatic_control
#        - script.execute: script_mode_EDF

#  - platform: template
#    name: pvbrain_mode_batterie
#    id: pvbrain_mode_batterie
#    icon: "mdi:solar-panel"
#    on_press:
#      then:
#        - switch.turn_off: pvbrain_ats_automatic_control
#        - script.execute: script_mode_batterie

#########   OFF-GRID or GRID #####
  - platform: template
    name: pvbrain_from_solar_to_grid
    id: pvbrain_from_solar_to_grid
    icon: "mdi:transmission-tower-import"
    on_press:
      then:
        - switch.turn_off: pvbrain_ats_automatic_control
        - script.execute: script_from_solar_to_grid

  - platform: template
    name: pvbrain_from_grid_to_solar
    id: pvbrain_from_grid_to_solar
    icon: "mdi:solar-panel"
    on_press:
      then:
        - switch.turn_off: pvbrain_ats_automatic_control
        - script.execute: script_from_grid_to_solar

switch:
  - platform: restart
    name: "restart_pvbrain"

  - platform: template
    name: pvbrain_ats_automatic_control
    id: pvbrain_ats_automatic_control
    optimistic: true
#########   GRID-TIRED or OFF-GRID #####
  - platform: gpio
    id: pvbrain_relay_mode_EDF
    name: pvbrain_relay_mode_EDF
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 1
      number: 0
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

  - platform: gpio
    id: pvbrain_relay_mode_batterie
    name: pvbrain_relay_mode_batterie
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 1
      number: 1
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

  - platform: gpio
    id: pvbrain_relay_3
    name: pvbrain_relay_3
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 1
      number: 2
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

  - platform: gpio
    id: pvbrain_relay_4
    name: pvbrain_relay_4
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 1
      number: 3
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

#########   OFF-GRID or GRID ######

  - platform: gpio
    id: pvbrain_relay_axpert
    name: pvbrain_relay_axpert
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 0
      number: 4
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

  - platform: gpio
    id: pvbrain_relay_12vto48V
    name: pvbrain_relay_12vto48V
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 0
      number: 5
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

  - platform: gpio
    id: pvbrain_relay_inversor_solar_input
    name: pvbrain_relay_inversor_solar_input
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 0
      number: 6
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

  - platform: gpio
    id: pvbrain_relay_inversor_grid_input
    name: pvbrain_relay_inversor_grid_input
    pin:
      pcf8574: pvbrain_hub
      # Use pin number 0
      number: 7
      # One of INPUT or OUTPUT
      mode: OUTPUT
      inverted: true

  - platform: pipsolar
    pipsolar_id: pip8048
    output_source_priority_utility:
      name: "pvbrain_axpert_output_source_priority_utility"
    output_source_priority_solar:
      name: "pvbrain_axpert_output_source_priority_solar"
    output_source_priority_battery:
      name: "pvbrain_axpert_output_source_priority_battery"
    input_voltage_range:
      name: "pvbrain_axpert_input_voltage_range"
    # pv_ok_condition_for_parallel:
      # name: "pvbrain_axpert_pv_ok_condition_for_parallel"
    # pv_power_balance:
      # name: "pvbrain_axpert_pv_power_balance"

  - platform: jk_bms
    # jk_bms_id: bms_0
    jk_bms_id: bms1
    charging:
      name: "pvbrain_jkbms_charging"
    discharging:
      name: "pvbrain_jkbms_discharging"
  # - platform: jk_bms
  #   jk_bms_id: bms_1
  #   charging:
  #     name: "pvbrain_jkbms2_charging"
  #   discharging:
  #     name: "pvbrain_jkbms2_discharging"

sensor:
  - platform: wifi_signal
    name: "WiFi puissance_pvbrain"
    update_interval: 10s

  - platform: uptime
    id: uptime_sec

    ############# PZEM1 GRID ENEDIS ##################

  - platform: pzemac
    address: 1
    current:
      name: "pvbrain_grid_courant"
      accuracy_decimals: 2
    voltage:
      name: "pvbrain_grid_tension"
      accuracy_decimals: 2
    power:
      name: "pvbrain_grid_puissance"
      unit_of_measurement: W
      accuracy_decimals: 1
      id: pvbrain_grid_puissance
    frequency:
      name: "pvbrain_grid_frequence"
      unit_of_measurement: Hz
      accuracy_decimals: 2
    power_factor:
      name: "pvbrain_grid_facteur_puissance"
      accuracy_decimals: 2
      id: pvbrain_grid_facteur_puissance
    energy:
      name: "pvbrain_grid_energy"
      unit_of_measurement: Wh
      accuracy_decimals: 1
      id: pvbrain_grid_energy
    update_interval: 5s
    modbus_id: modbus2
    id: pvbrain_pzem_grid

  - platform: template
    name: "pvbrain_grid_puissance_cumulee"
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    update_interval: 5s
    icon: mdi:power
    lambda: return id(pvbrain_grid_energy).state / 1000.0f;

  - platform: total_daily_energy
    name: "pvbrain_grid_du_jour"
    power_id: pvbrain_grid_puissance
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    id: pvbrain_grid_puissance_du_jour
    method: trapezoid
    filters:
        # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter

  - platform: template
    name: "pvbrain_grid_veille"
    id: template_pvbrain_grid_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    icon: mdi:power
    update_interval: 10s
    lambda: return (id(template_pvbrain_grid_veille).state = id(pvbrain_grid_veille_global));

  - platform: template
    name: "pvbrain_grid_puissance_apparente"
    id: pvbrain_grid_puissance_apparente
    unit_of_measurement: "VA"
    accuracy_decimals: 1
    update_interval: 5s
    icon: mdi:power
    lambda: |-
      if (id(pvbrain_grid_facteur_puissance).state != 0.0f) {
        return id(pvbrain_grid_puissance).state / id(pvbrain_grid_facteur_puissance).state;
      }
      return id(pvbrain_grid_puissance).state;

  - platform: template
    name: "pvbrain_grid_puissance_reactive"
    id: pvbrain_grid_puissance_reactive
    unit_of_measurement: "VAr"
    accuracy_decimals: 1
    update_interval: 5s
    icon: mdi:power
    lambda: return id(pvbrain_grid_puissance_apparente).state * sin(acos(id(pvbrain_grid_facteur_puissance).state));

  ########### PZEM2 SOLAR PV ##################

  - platform: pzemac
    address: 2
    current:
      name: "pvbrain_solar_courant"
      accuracy_decimals: 2
    voltage:
      name: "pvbrain_solar_tension"
      accuracy_decimals: 2
    power:
      name: "pvbrain_solar_puissance"
      unit_of_measurement: W
      accuracy_decimals: 2
      id: pvbrain_solar_puissance
    frequency:
      name: "pvbrain_solar_frequence"
      unit_of_measurement: Hz
      accuracy_decimals: 2
    power_factor:
      name: "pvbrain_solar_facteur_puissance"
      accuracy_decimals: 2
      id: pvbrain_solar_facteur_puissance
    energy:
      name: "pvbrain_solar_energy"
      unit_of_measurement: Wh
      accuracy_decimals: 1
      id: pvbrain_solar_energy
    update_interval: 5s
    modbus_id: modbus2
    id: pvbrain_pzem_solar

  - platform: template
    name: "pvbrain_solar_puissance_cumulee"
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    update_interval: 5s
    icon: mdi:power
    lambda: return id(pvbrain_solar_energy).state / 1000.0f;

  - platform: total_daily_energy
    name: "pvbrain_solar_du_jour"
    power_id: pvbrain_solar_puissance
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    id: pvbrain_solar_puissance_du_jour
    method: trapezoid
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter

  - platform: template
    name: pvbrain_solar_veille
    id: template_pvbrain_solar_veille
    unit_of_measurement: "kWh"
    accuracy_decimals: 1
    icon: mdi:power
    update_interval: 10s
    lambda: |-
      return (id(template_pvbrain_solar_veille).state = id(pvbrain_solar_veille_global));

  - platform: template
    name: "pvbrain_solar_puissance_apparente"
    id: pvbrain_solar_puissance_apparente
    unit_of_measurement: "VA"
    accuracy_decimals: 1
    update_interval: 5s
    icon: mdi:power
    lambda: |-
      if (id(pvbrain_solar_facteur_puissance).state != 0.0f) {
        return id(pvbrain_solar_puissance).state / id(pvbrain_solar_facteur_puissance).state;
      }
      return id(pvbrain_solar_puissance).state;

  - platform: template
    name: "pvbrain_solar_puissance_reactive"
    id: pvbrain_solar_puissance_reactive
    unit_of_measurement: "VAr"
    accuracy_decimals: 1
    update_interval: 5s
    icon: mdi:power
    lambda: return id(pvbrain_solar_puissance_apparente).state * sin(acos(id(pvbrain_solar_facteur_puissance).state));

  ############# BME 280  ##################

  - platform: bme280
    temperature:
      name: "pvbrain_temperature_sdb_bas"
      accuracy_decimals: 1
      oversampling: 16x
      id: pvbrain_temperature_sdb_bas
    pressure:
      name: "pvbrain_pression_sdb_bas"
      accuracy_decimals: 1
      id: pvbrain_pression_sdb_bas
    humidity:
      name: "pvbrain_humidite_sdb_bas"
      accuracy_decimals: 1
      id: pvbrain_humidite_sdb_bas
    address: 0x76
    update_interval: 5s

   # ######### ADS1115 ###########

  # - platform: ads1115
    # multiplexer: 'A0_A1'
    # gain: 4.096 #6.144
    # name: "pvbrain_PV1_voltage"
    # id: pvbrain_PV1_voltage
    # update_interval: 5s
    # filters:
    # - lambda: return x * (500.0f/4.096f);

  # - platform: ads1115
    # multiplexer: 'A2_A3'
    # gain: 4.096 #6.144
    # name: "pvbrain_PV2_voltage"
    # id: pvbrain_PV2_voltage
    # update_interval: 5s
    # filters:
    # - lambda: return x * (500.0f/4.096f);

  - platform: pipsolar
    pipsolar_id: pip8048
    # grid_rating_voltage:
      # id: pvbrain_axpert_grid_rating_voltage
      # name: pvbrain_axpert_grid_rating_voltage
    # grid_rating_current:
      # id: pvbrain_axpert_grid_rating_current
      # name: pvbrain_axpert_grid_rating_current
    ac_output_rating_voltage:
      id: pvbrain_axpert_ac_output_rating_voltage
      name: pvbrain_axpert_ac_output_rating_voltage
    ac_output_rating_frequency:
      id: pvbrain_axpert_ac_output_rating_frequency
      name: pvbrain_axpert_ac_output_rating_frequency
    ac_output_rating_current:
      id: pvbrain_axpert_ac_output_rating_current
      name: pvbrain_axpert_ac_output_rating_current
    ac_output_rating_apparent_power:
      id: pvbrain_axpert_ac_output_rating_apparent_power
      name: pvbrain_axpert_ac_output_rating_apparent_power
    ac_output_rating_active_power:
      id: pvbrain_axpert_ac_output_rating_active_power
      name: pvbrain_axpert_ac_output_rating_active_power
    battery_rating_voltage:
      id: pvbrain_axpert_battery_rating_voltage
      name: pvbrain_axpert_battery_rating_voltage
    battery_recharge_voltage:
      id: pvbrain_axpert_battery_recharge_voltage
      name: pvbrain_axpert_battery_recharge_voltage
    battery_under_voltage:
      id: pvbrain_axpert_battery_under_voltage
      name: pvbrain_axpert_battery_under_voltage
    battery_bulk_voltage:
      id: pvbrain_axpert_battery_bulk_voltage
      name: pvbrain_axpert_battery_bulk_voltage
    battery_float_voltage:
      id: pvbrain_axpert_battery_float_voltage
      name: pvbrain_axpert_battery_float_voltage
    battery_type:
      id: pvbrain_axpert_battery_type
      name: pvbrain_axpert_battery_type
    battery_redischarge_voltage:
      id: pvbrain_axpert_battery_redischarge_voltage
      name: pvbrain_axpert_battery_redischarge_voltage
    current_max_ac_charging_current:
      id: pvbrain_axpert_current_max_ac_charging_current
      name: pvbrain_axpert_current_max_ac_charging_current
    current_max_charging_current:
      id: pvbrain_axpert_current_max_charging_current
      name: pvbrain_axpert_current_max_charging_current
    output_source_priority:
      id: pvbrain_axpert_output_source_priority
      name: pvbrain_axpert_output_source_priority
    output_mode:
      id: pvbrain_axpert_output_mode
      name: pvbrain_axpert_output_mode
    output_load_percent:
      id: pvbrain_axpert_output_load_percent
      name: pvbrain_axpert_output_load_percent
    charger_source_priority:
      id: pvbrain_axpert_charger_source_priority
      name: pvbrain_axpert_charger_source_priority
    grid_voltage:
      id: pvbrain_axpert_grid_voltage
      name: pvbrain_axpert_grid_voltage
    grid_frequency:
      id: pvbrain_axpert_grid_frequency
      name: pvbrain_axpert_grid_frequency
    ac_output_voltage:
      id: pvbrain_axpert_ac_output_voltage
      name: pvbrain_axpert_ac_output_voltage
    ac_output_frequency:
      id: pvbrain_axpert_ac_output_frequency
      name: pvbrain_axpert_ac_output_frequency
    # ac_output_apparent_power:
      # id: pvbrain_axpert_ac_output_apparent_power
      # name: pvbrain_axpert_ac_output_apparent_power
    ac_output_active_power:
      id: pvbrain_axpert_ac_output_active_power
      name: pvbrain_axpert_ac_output_active_power
    bus_voltage:
      id: pvbrain_axpert_bus_voltage
      name: pvbrain_axpert_bus_voltage
    battery_voltage:
      id: pvbrain_axpert_battery_voltage
      name: pvbrain_axpert_battery_voltage
    battery_charging_current:
      id: pvbrain_axpert_battery_charging_current
      name: pvbrain_axpert_battery_charging_current
    battery_capacity_percent:
      id: pvbrain_axpert_battery_capacity_percent
      name: pvbrain_axpert_battery_capacity_percent
    battery_voltage_scc:
      id: pvbrain_axpert_battery_voltage_scc
      name: pvbrain_axpert_battery_voltage_scc
    battery_discharge_current:
      id: pvbrain_axpert_battery_discharge_current
      name: pvbrain_axpert_battery_discharge_current
    battery_voltage_offset_for_fans_on:
      id: pvbrain_axpert_battery_voltage_offset_for_fans_on
      name: pvbrain_axpert_battery_voltage_offset_for_fans_on
    inverter_heat_sink_temperature:
      id: pvbrain_axpert_inverter_heat_sink_temperature
      name: pvbrain_axpert_inverter_heat_sink_temperature
#    add_sbu_priority_version:
#      id: pvbrain_axpert_add_sbu_priority_version
#      name: pvbrain_axpert_add_sbu_priority_version
#    eeprom_version:
#      id: pvbrain_axpert_eeprom_version
#      name: pvbrain_axpert_eeprom_version
#    scc_firmware_version:
#      id: pvbrain_axpert_scc_firmware_version
#      name: pvbrain_axpert_scc_firmware_version
    pv1_input_current:
      id: pvbrain_axpert_pv1_input_current
      name: pvbrain_axpert_pv1_input_current
    pv1_input_voltage:
      id: pvbrain_axpert_pv1_input_voltage
      name: pvbrain_axpert_pv1_input_voltage
    pv1_charging_power:
      id: pvbrain_axpert_pv1_charging_power
      name: pvbrain_axpert_pv1_charging_power
    pv2_input_current:
      id: pvbrain_axpert_pv2_input_current
      name: pvbrain_axpert_pv2_input_current
    pv2_input_voltage:
      id: pvbrain_axpert_pv2_input_voltage
      name: pvbrain_axpert_pv2_input_voltage
    pv2_charging_power:
      id: pvbrain_axpert_pv2_charging_power
      name: pvbrain_axpert_pv2_charging_power

  - platform: template
    name: "pvbrain_axpert_PV_power_total"
    id: pvbrain_axpert_PV_power_total
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: 2s
    icon: mdi:power
    lambda: return id(pvbrain_axpert_pv1_charging_power).state + id(pvbrain_axpert_pv2_charging_power).state;

  - platform: total_daily_energy
    name: pvbrain_axpert_PV_power_total_du_jour
    power_id: pvbrain_axpert_PV_power_total
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: pvbrain_axpert_PV_power_total_du_jour
    method: trapezoid
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter

  - platform: template
    name: pvbrain_axpert_PV_power_total_veille
    id: template_pvbrain_axpert_PV_power_total_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: 10s
    lambda: |-
      return (id(template_pvbrain_axpert_PV_power_total_veille).state = id(pvbrain_axpert_PV_power_total_veille_global));


  - platform: total_daily_energy
    name: pvbrain_axpert_ac_output_active_power_total_du_jour
    power_id: pvbrain_axpert_ac_output_active_power
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: pvbrain_axpert_ac_output_active_power_total_du_jour
    method: trapezoid
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter

  - platform: template
    name: pvbrain_axpert_ac_output_active_power_veille
    id: template_pvbrain_axpert_ac_output_active_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: 10s
    lambda: |-
      return (id(template_pvbrain_axpert_ac_output_active_power_veille).state = id(pvbrain_axpert_ac_output_active_power_veille_global));

  # - platform: template
    # name: "pvbrain_axpert_battery_charging_power"
    # id: pvbrain_axpert_battery_charging_power
    # unit_of_measurement: "W"
    # accuracy_decimals: 1
    # update_interval: 2s
    # icon: mdi:power
    # lambda: return id(pvbrain_axpert_battery_voltage).state * id(pvbrain_axpert_battery_charging_current).state;

  # - platform: total_daily_energy
    # name: pvbrain_axpert_battery_charging_power_total_du_jour
    # power_id: pvbrain_axpert_battery_charging_power
    # unit_of_measurement: "kWh"
    # accuracy_decimals: 2
    # id: pvbrain_axpert_battery_charging_power_total_du_jour
    # method: trapezoid
    # filters:
       # # Multiplication factor from W to kW is 0.001
       # - multiply: 0.001
    # icon: mdi:counter

  # - platform: template
    # name: pvbrain_axpert_battery_charging_power_veille
    # id: template_pvbrain_axpert_battery_charging_power_veille
    # unit_of_measurement: "kwh"
    # accuracy_decimals: 2
    # icon: mdi:power
    # update_interval: 10s

  # - platform: template
    # name: "pvbrain_axpert_battery_discharging_power"
    # id: pvbrain_axpert_battery_discharging_power
    # unit_of_measurement: "W"
    # accuracy_decimals: 1
    # update_interval: 2s
    # icon: mdi:power
    # lambda: return id(pvbrain_axpert_battery_voltage).state * id(pvbrain_axpert_battery_discharge_current).state;

  # - platform: total_daily_energy
    # name: pvbrain_axpert_battery_discharging_power_total_du_jour
    # power_id: pvbrain_axpert_battery_discharging_power
    # unit_of_measurement: "kWh"
    # accuracy_decimals: 2
    # id: pvbrain_axpert_battery_discharging_power_total_du_jour
    # method: trapezoid
    # filters:
       # # Multiplication factor from W to kW is 0.001
       # - multiply: 0.001
    # icon: mdi:counter

  # - platform: template
    # name: pvbrain_axpert_battery_discharging_power_veille
    # id: template_pvbrain_axpert_battery_discharging_power_veille
    # unit_of_measurement: "kwh"
    # accuracy_decimals: 2
    # icon: mdi:power
    # update_interval: 10s

  ############# JKBMS ##################

  - platform: jk_bms
    # jk_bms_id: bms_0
    jk_bms_id: bms1
    min_cell_voltage:
      name: "pvbrain_jkbms min cell voltage"
    max_cell_voltage:
      name: "pvbrain_jkbms max cell voltage"
    delta_cell_voltage:
      name: "pvbrain_jkbms delta cell voltage"
    average_cell_voltage:
      name: "pvbrain_jkbms_average_cell_voltage"
    cell_voltage_1:
      name: "pvbrain_jkbms cell voltage 1"
    cell_voltage_2:
      name: "pvbrain_jkbms cell voltage 2"
    cell_voltage_3:
      name: "pvbrain_jkbms cell voltage 3"
    cell_voltage_4:
      name: "pvbrain_jkbms cell voltage 4"
    cell_voltage_5:
      name: "pvbrain_jkbms cell voltage 5"
    cell_voltage_6:
      name: "pvbrain_jkbms cell voltage 6"
    cell_voltage_7:
      name: "pvbrain_jkbms cell voltage 7"
    cell_voltage_8:
      name: "pvbrain_jkbms cell voltage 8"
    cell_voltage_9:
      name: "pvbrain_jkbms cell voltage 9"
    cell_voltage_10:
      name: "pvbrain_jkbms cell voltage 10"
    cell_voltage_11:
      name: "pvbrain_jkbms cell voltage 11"
    cell_voltage_12:
      name: "pvbrain_jkbms cell voltage 12"
    cell_voltage_13:
      name: "pvbrain_jkbms cell voltage 13"
    cell_voltage_14:
      name: "pvbrain_jkbms cell voltage 14"
    cell_voltage_15:
      name: "pvbrain_jkbms cell voltage 15"
    cell_voltage_16:
      name: "pvbrain_jkbms cell voltage 16"
    power_tube_temperature:
      name: "pvbrain_jkbms power tube temperature"
    temperature_sensor_1:
      name: "pvbrain_jkbms temperature sensor 1"
    temperature_sensor_2:
      name: "pvbrain_jkbms temperature sensor 2"
    total_voltage:
      name: "pvbrain_jkbms total voltage"
      id: pvbrain_jkbms_total_voltage
      on_value:
        - if:  ##### si tension batterie < seuil bas    ######
            condition:
              and:
                - switch.is_on: pvbrain_ats_automatic_control
                - lambda: |-
                    return id(pvbrain_jkbms_total_voltage).state < id(pvbrain_inverseur_tension_bascule_solar_to_grid_number).state;
            then:

#########   GRID-TIRED or OFF-GRID #####

#              - script.execute: script_mode_EDF

#########   OFF-GRID or GRID ######
              - script.execute: script_from_solar_to_grid

        - if:  ##### si tension batterie > seuil haut    ######
            condition:
              and:
                - switch.is_on: pvbrain_ats_automatic_control
                - lambda: |-
                    return id(pvbrain_jkbms_total_voltage).state > id(pvbrain_inverseur_tension_bascule_solar_to_grid_number).state;
            then:
#########   GRID-TIRED or OFF-GRID #####
#              - script.execute: script_mode_batterie
#########   OFF-GRID or GRID ######
              - script.execute: script_from_grid_to_solar

    current:
      name: "pvbrain_jkbms current"
      id: pvbrain_jkbms_current
#      filters:
#        - multiply: -1
    capacity_remaining:
      name: "pvbrain_jkbms capacity remaining"
      id: pvbrain_jkbms_capacity_remaining
    charging_cycles:
      name: "pvbrain_jkbms charging cycles"
#    total_charging_cycle_capacity:
#      name: "pvbrain_jkbms total charging cycle capacity"
    cell_voltage_overvoltage_protection:
      name: pvbrain_jkbms_voltage_overvoltage_protection
    cell_voltage_overvoltage_recovery:
      name: pvbrain_jkbms_voltage_overvoltage_recovery
    # cell_voltage_overvoltage_delay:
      # name: "pvbrain_jkbms voltage overvoltage delay"
    cell_voltage_undervoltage_protection:
      name: pvbrain_jkbms_voltage_undervoltage_protection
    cell_voltage_undervoltage_recovery:
      name: pvbrain_jkbms_voltage_undervoltage_recovery"
    # cell_voltage_undervoltage_delay:
      # name: "pvbrain_jkbms voltage undervoltage delay"
    total_battery_capacity_setting:
      name: pvbrain_jkbms_total_battery_capacity_setting
      id: pvbrain_jkbms_total_battery_capacity_setting
    errors_bitmask:
      name: pvbrain_jkbms_errors_bitmask
    # operation_mode_bitmask:
      # name: pvbrain_jkbms_operation_mode_bitmask
    # battery_strings:
      # name: pvbrain_jkbms_battery_strings

  - platform: template
    name: pvbrain_jkbms_c_values
    id: pvbrain_jkbms_c_values
    unit_of_measurement: "c"
    accuracy_decimals: 3
    update_interval: 2s
    icon: mdi:current-dc
    lambda: |-
        return ( fabs(float(id(pvbrain_jkbms_current).state)) / float(id(pvbrain_jkbms_total_battery_capacity_setting).state) );     
        
  - platform: template
    name: "pvbrain_jkbms_battery_charging_current"
    id: pvbrain_jkbms_battery_charging_current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    update_interval: 2s
    icon: mdi:current-dc
    lambda: |-
      if (id(pvbrain_jkbms_current).state > 0.0f) {
        return id(pvbrain_jkbms_current).state;
      }
      return 0.0f;

  - platform: template
    name: "pvbrain_jkbms_battery_charging_power"
    id: pvbrain_jkbms_battery_charging_power
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: 2s
    icon: mdi:power
    lambda: |-
      if (id(pvbrain_jkbms_current).state > 0.0f) {
        return id(pvbrain_jkbms_total_voltage).state * id(pvbrain_jkbms_current).state;
      }
      return 0.0f;

  - platform: total_daily_energy
    name: pvbrain_jkbms_battery_charging_power_total_du_jour
    power_id: pvbrain_jkbms_battery_charging_power
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: pvbrain_jkbms_battery_charging_power_total_du_jour
    method: trapezoid
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter

  - platform: template
    name: pvbrain_jkbms_battery_charging_power_veille
    id: template_pvbrain_jkbms_battery_charging_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: 10s
    lambda: |-
      return (id(template_pvbrain_jkbms_battery_charging_power_veille).state = id(pvbrain_jkbms_battery_charging_power_veille_global));

  - platform: template
    name: "pvbrain_jkbms_battery_discharging_current"
    id: pvbrain_jkbms_battery_discharging_current
    unit_of_measurement: "A"
    accuracy_decimals: 1
    update_interval: 2s
    icon: mdi:current-dc
    lambda: |-
      if (id(pvbrain_jkbms_current).state < 0.0f) {
        return id(pvbrain_jkbms_current).state;
      }
      return 0.0f;

  - platform: template
    name: "pvbrain_jkbms_battery_discharging_power"
    id: pvbrain_jkbms_battery_discharging_power
    unit_of_measurement: "W"
    accuracy_decimals: 1
    update_interval: 2s
    icon: mdi:power
    lambda: |-
      if (id(pvbrain_jkbms_current).state < 0.0f) {
        return -1.0 * id(pvbrain_jkbms_total_voltage).state * id(pvbrain_jkbms_current).state;
      }
      return 0.0f;

  - platform: total_daily_energy
    name: pvbrain_jkbms_battery_discharging_power_total_du_jour
    power_id: pvbrain_jkbms_battery_discharging_power
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    id: pvbrain_jkbms_battery_discharging_power_total_du_jour
    method: trapezoid
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:counter

  - platform: template
    name: pvbrain_jkbms_battery_discharging_power_veille
    id: template_pvbrain_jkbms_battery_discharging_power_veille
    unit_of_measurement: "kwh"
    accuracy_decimals: 2
    icon: mdi:power
    update_interval: 10s
    lambda: |-
      return (id(template_pvbrain_jkbms_battery_discharging_power_veille).state = id(pvbrain_jkbms_battery_discharging_power_veille_global));

text_sensor:
  - platform: template
    name: pvbrain_uptime
    lambda: |-
      int seconds = id(uptime_sec).state;
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
    icon: mdi:clock-start
    update_interval: 113s

  - platform: template
    name: pvbrain_remaining_time
    lambda: |-
      if(id(pvbrain_jkbms_current).state < 0) {
        int seconds = int(id(pvbrain_jkbms_capacity_remaining).state * 0.01f * id(pvbrain_jkbms_total_battery_capacity_setting).state / -1.0f * id(pvbrain_jkbms_current).state * 3600.0f);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return { ("Discharging time to go: " + String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      }

      if(id(pvbrain_jkbms_current).state > 0) {
        int seconds = int((1.0f - id(pvbrain_jkbms_capacity_remaining).state * 0.01f) * id(pvbrain_jkbms_total_battery_capacity_setting).state / id(pvbrain_jkbms_current).state * 3600.0f);
        int days = seconds / (24 * 3600);
        seconds = seconds % (24 * 3600);
        int hours = seconds / 3600;
        seconds = seconds % 3600;
        int minutes = seconds /  60;
        seconds = seconds % 60;
        return { ("Charging time to go: " + String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      }

      return {""};
    icon: mdi:clock-start
    update_interval: 5s

  - platform: template
    name: pvbrain_axpert_battery_type_text
    id: pvbrain_axpert_battery_type_text
    lambda: |-
      if (isnan(id(pvbrain_axpert_battery_type).state)) {
        return {"KO"};
      }
      static const char *battery_list[] = {"AGn", "FLd", "USE", "PYL", "EC", "SOL"};
      return {battery_list[int(id(pvbrain_axpert_battery_type).state)]};

    update_interval: 5s
  - platform: template
    name: pvbrain_axpert_output_source_priority_text
    id: pvbrain_axpert_output_source_priority_text
    lambda: |-
      if (isnan(id(pvbrain_axpert_output_source_priority).state)) {
        return {"KO"};
      }
      static const char *sources_list[] = {"USB", "SUB", "SBU"};
      return {sources_list[int(id(pvbrain_axpert_output_source_priority).state)]};
    update_interval: 5s

  # - platform: pipsolar
    # pipsolar_id: pip8048
    # device_mode:
       # id: pvbrain_axpert_device_mode
       # name: pvbrain_axpertdevice_mode
    # last_qpigs:
       # id: pvbrain_axpert_last_qpigs
       # name: pvbrain_axpert_last_qpigs
    # last_qpiri:
       # id: pvbrain_axpert_last_qpiri
       # name: pvbrain_axpert_last_qpiri

  - platform: jk_bms
    jk_bms_id: bms1
    errors:
      name: "pvbrain_jkbms errors"
    operation_mode:
      name: "pvbrain_jkbms operation mode"
    # battery_type:
      # name: "pvbrain_jkbms battery type"
    # password:
      # name: "pvbrain_jkbms password"
    # device_type:
      # name: "pvbrain_jkbms device type"
    # software_version:
      # name: "pvbrain_jkbms software version"
    # manufacturer:
      # name: "pvbrain_jkbms manufacturer"

##################    JKBMS 2 ###########################

#   - platform: jk_bms
#     jk_bms_id: bms_1
#     min_cell_voltage:
#       name: "pvbrain_jkbms2 min cell voltage"
#       id: pvbrain_jkbms2_min_cell_voltage
#     max_cell_voltage:
#       name: "pvbrain_jkbms2 max cell voltage"
#     min_voltage_cell:
#       name: "pvbrain_jkbms2_min voltage cell"
#     max_voltage_cell:
#       name: "pvbrain_jkbms2_max voltage cell"   
#     actual_battery_capacity:
#       name: "pvbrain_jkbms2_actual battery capacity"
#     delta_cell_voltage:
#       name: "pvbrain_jkbms2 delta cell voltage"
#     average_cell_voltage:
#       name: "pvbrain_jkbms2_average_cell_voltage"
#     cell_voltage_1:
#       name: "pvbrain_jkbms2 cell voltage 1"
#     cell_voltage_2:
#       name: "pvbrain_jkbms2 cell voltage 2"
#     cell_voltage_3:
#       name: "pvbrain_jkbms2 cell voltage 3"
#     cell_voltage_4:
#       name: "pvbrain_jkbms2 cell voltage 4"
#     cell_voltage_5:
#       name: "pvbrain_jkbms2 cell voltage 5"
#     cell_voltage_6:
#       name: "pvbrain_jkbms2 cell voltage 6"
#     cell_voltage_7:
#       name: "pvbrain_jkbms2 cell voltage 7"
#     cell_voltage_8:
#       name: "pvbrain_jkbms2 cell voltage 8"
#     cell_voltage_9:
#       name: "pvbrain_jkbms2 cell voltage 9"
#     cell_voltage_10:
#       name: "pvbrain_jkbms2 cell voltage 10"
#     cell_voltage_11:
#       name: "pvbrain_jkbms2 cell voltage 11"
#     cell_voltage_12:
#       name: "pvbrain_jkbms2 cell voltage 12"
#     cell_voltage_13:
#       name: "pvbrain_jkbms2 cell voltage 13"
#     cell_voltage_14:
#       name: "pvbrain_jkbms2 cell voltage 14"
#     cell_voltage_15:
#       name: "pvbrain_jkbms2 cell voltage 15"
#     cell_voltage_16:
#       name: "pvbrain_jkbms2 cell voltage 16"
#     power_tube_temperature:
#       name: "pvbrain_jkbm2 power tube temperature"
#     temperature_sensor_1:
#       name: "pvbrain_jkbms2 temperature sensor 1"
#     temperature_sensor_2:
#       name: "pvbrain_jkbms2 temperature sensor 2"
#     power:
#       name: "pvbrain_jkbms2 power"
#     total_voltage:
#       name: "pvbrain_jkbms2 total voltage"
#       id: pvbrain_jkbms2_total_voltage
#     current:
#       name: "pvbrain_jkbms2 current"
#       id: pvbrain_jkbms2_current
# #      filters:
# #        - multiply: -1
#     capacity_remaining:
#       name: "pvbrain_jkbms2 capacity remaining"
#       id: pvbrain_jkbms2_capacity_remaining
#     charging_cycles:
#       name: "pvbrain_jkbms2 charging cycles"
# #    total_charging_cycle_capacity:
# #      name: "pvbrain_jkbms total charging cycle capacity"
#     cell_voltage_overvoltage_protection:
#       name: pvbrain_jkbm2_voltage_overvoltage_protection
#     cell_voltage_overvoltage_recovery:
#       name: pvbrain_jkbms2_voltage_overvoltage_recovery
#     # cell_voltage_overvoltage_delay:
#       # name: "pvbrain_jkbms voltage overvoltage delay"
#     cell_voltage_undervoltage_protection:
#       name: pvbrain_jkbms2_voltage_undervoltage_protection
#     cell_voltage_undervoltage_recovery:
#       name: pvbrain_jkbms2_voltage_undervoltage_recovery"
#     # cell_voltage_undervoltage_delay:
#       # name: "pvbrain_jkbms voltage undervoltage delay"
#     total_battery_capacity_setting:
#       name: pvbrain_jkbms2_total_battery_capacity_setting
#       id: pvbrain_jkbms2_total_battery_capacity_setting
#     errors_bitmask:
#       name: pvbrain_jkbms2_errors_bitmask
#   - platform: template
#     name: "pvbrain_jkbms2_battery_charging_current"
#     id: pvbrain_jkbms2_battery_charging_current
#     unit_of_measurement: "A"
#     accuracy_decimals: 1
#     update_interval: 2s
#     icon: mdi:current-dc
#     lambda: |-
#       if (id(pvbrain_jkbms2_current).state > 0.0f) {
#         return id(pvbrain_jkbms2_current).state;
#       }
#       return 0.0f;
#   - platform: template
#     name: "pvbrain_jkbms2_battery_charging_power"
#     id: pvbrain_jkbms2_battery_charging_power
#     unit_of_measurement: "W"
#     accuracy_decimals: 1
#     update_interval: 2s
#     icon: mdi:power
#     lambda: |-
#       if (id(pvbrain_jkbms2_current).state > 0.0f) {
#         return id(pvbrain_jkbms2_total_voltage).state * id(pvbrain_jkbms2_current).state;
#       }
#       return 0.0f;
#   - platform: total_daily_energy
#     name: pvbrain_jkbms2_battery_charging_power_total_du_jour
#     power_id: pvbrain_jkbms2_battery_charging_power
#     unit_of_measurement: "kWh"
#     accuracy_decimals: 2
#     id: pvbrain_jkbms2_battery_charging_power_total_du_jour
#     method: trapezoid
#     filters:
#       # Multiplication factor from W to kW is 0.001
#       - multiply: 0.001
#     icon: mdi:counter

#   - platform: template
#     name: pvbrain_jkbms2_battery_charging_power_veille
#     id: template_pvbrain_jkbms2_battery_charging_power_veille
#     unit_of_measurement: "kwh"
#     accuracy_decimals: 2
#     icon: mdi:power
#     update_interval: 10s
#     lambda: |-
#       return (id(template_pvbrain_jkbms2_battery_charging_power_veille).state = id(pvbrain_jkbms2_battery_charging_power_veille_global));
#   - platform: template
#     name: "pvbrain_jkbms2_battery_discharging_current"
#     id: pvbrain_jkbms2_battery_discharging_current
#     unit_of_measurement: "A"
#     accuracy_decimals: 1
#     update_interval: 2s
#     icon: mdi:current-dc
#     lambda: |-
#       if (id(pvbrain_jkbms2_current).state < 0.0f) {
#         return id(pvbrain_jkbms2_current).state;
#       }
#       return 0.0f;
#   - platform: template
#     name: "pvbrain_jkbms2_battery_discharging_power"
#     id: pvbrain_jkbms2_battery_discharging_power
#     unit_of_measurement: "W"
#     accuracy_decimals: 1
#     update_interval: 2s
#     icon: mdi:power
#     lambda: |-
#       if (id(pvbrain_jkbms2_current).state < 0.0f) {
#         return -1.0 * id(pvbrain_jkbms2_total_voltage).state * id(pvbrain_jkbms2_current).state;
#       }
#       return 0.0f;
#   - platform: total_daily_energy
#     name: pvbrain_jkbms2_battery_discharging_power_total_du_jour
#     power_id: pvbrain_jkbms2_battery_discharging_power
#     unit_of_measurement: "kWh"
#     accuracy_decimals: 2
#     id: pvbrain_jkbms2_battery_discharging_power_total_du_jour
#     method: trapezoid
#     filters:
#       # Multiplication factor from W to kW is 0.001
#       - multiply: 0.001
#     icon: mdi:counter

#   - platform: template
#     name: pvbrain_jkbms2_battery_discharging_power_veille
#     id: template_pvbrain_jkbms2_battery_discharging_power_veille
#     unit_of_measurement: "kwh"
#     accuracy_decimals: 2
#     icon: mdi:power
#     update_interval: 10s
#     lambda: |-
#       return (id(template_pvbrain_jkbms2_battery_discharging_power_veille).state = id(pvbrain_jkbms2_battery_discharging_power_veille_global));


script:

#########   OFF-GRID or GRID ######

  - id: script_from_solar_to_grid
    then:
      - if:  ##### cas 1 (principal) on teste si AC_in:off, onduleur:on, ENEDIS:on => sequence solar to grid ####
          condition:
            and:
              - binary_sensor.is_off: pvbrain_axpert_grid_input_on
              - binary_sensor.is_on: pvbrain_axpert_switch_on
              - binary_sensor.is_on: pvbrain_grid_230V
          then:
            - switch.turn_on: pvbrain_relay_inversor_solar_input  # switch to grid source
            - delay: 2s
            - switch.turn_off: pvbrain_relay_axpert  # turn off solar inverter
#       - if:  ##### cas 2 (rare) on teste si AC_in:on, onduleur:on => ####
#           condition:
#             and:
#               - binary_sensor.is_on: pvbrain_axpert_grid_input_on
#               - binary_sensor.is_on: pvbrain_axpert_switch_on
#           then:
#             - switch.turn_off: pvbrain_relay_inversor_solar_input

  - id: script_from_grid_to_solar
    then:
#       - logger.log:
#           format: "grid_input_on %d, switch_on %d"
#           args: [ 'id(pvbrain_axpert_grid_input_on).state', 'id(pvbrain_axpert_switch_on).state' ]
      - if:
          condition:
            and:
              - binary_sensor.is_off: pvbrain_axpert_grid_input_on
              - binary_sensor.is_off: pvbrain_axpert_switch_on
#               - binary_sensor.is_on: pvbrain_pv_230V
          then:
            - switch.turn_on: pvbrain_relay_axpert  ### turn on solar inverter
            - delay: 13s
            - switch.turn_off: pvbrain_relay_inversor_solar_input  ### switch to PV source


 #########   GRID-TIRED or OFF-GRID #####
#  - id: script_mode_EDF
#    then:


#             - switch.turn_off: pvbrain_relay_mode_batterie
#             - switch.turn_on: pvbrain_relay_mode_EDF
#             - delay: 10s
#             - select.set:
#                 id: pvbrain_axpert_output_source_priority_select
#                 option: "Solar Utility Battery"


#  - id: script_mode_batterie
#    then:


#            - select.set:
#                id: pvbrain_axpert_output_source_priority_select
#                option: "Solar Battery Utility"
#            - delay: 10s
#            - switch.turn_off: pvbrain_relay_mode_EDF
#            - switch.turn_on: pvbrain_relay_mode_batterie

select:
  - platform: pipsolar
    pipsolar_id: pip8048
    output_source_priority:
      id: pvbrain_axpert_output_source_priority_select
      name: pvbrain_axpert_output_source_priority_select
      optionsmap:
        "Utility first": "POP00"
        "Solar only": "POP01"
        "Solar Battery Utility": "POP02"
      statusmap:
        "0": "Utility Solar Battery"
        "1": "Solar Utility Battery"
        "2": "Solar Battery Utility"

  - platform: pipsolar
    pipsolar_id: pip8048
    output_source_priority:
      id: pvbrain_axpert_charger_source_priority_select 
      name: pvbrain_axpert_charger_source_priority_select
      optionsmap:
#        "Utility first": "PCP00"
        "Solar first": "PCP01"
        "Solar and utility": "PCP02"
        "Only solar": "PCP03"
      statusmap:
#        "0": "Utility first"
        "1": "Solar first"
        "2": "Solar and utility"
        "3": "Only solar"

  - platform: pipsolar
    pipsolar_id: pip8048
    current_max_ac_charging_current:
      id: pvbrain_axpert_current_max_ac_charging_current_select 
      name: pvbrain_axpert_current_max_ac_charging_current_select
      optionsmap:
        "2A": "MUCHGC0002"
        "10A": "MUCHGC0010"
        "20A": "MUCHGC0020"
        "30A": "MUCHGC0030"
        "40A": "MUCHGC0040"
        "50A": "MUCHGC0050"
        "60A": "MUCHGC0060"
        "70A": "MUCHGC0070"
        "80A": "MUCHGC0080"
        "90A": "MUCHGC0090"
        "100A": "MUCHGC0100"
        "110A": "MUCHGC0110"
        "120A": "MUCHGC0120"
      statusmap:
        "2": "2A"
        "10": "10A"
        "20": "20A"
        "30": "30A"       
        "40": "40A"
        "50": "50A"
        "60": "60A"
        "70": "70A"
        "80": "80A"
        "90": "90A"
        "100": "100A"
        "110": "110A"
        "120": "120A"
  
  - platform: pipsolar
    pipsolar_id: pip8048
    current_max_charging_current:
      id: pvbrain_axpert_current_max_charging_current_select 
      name: pvbrain_axpert_current_max_charging_current_select
      optionsmap:
        "10A": "MCHGC010"
        "20A": "MCHGC020"
        "30A": "MCHGC030"
        "40A": "MCHGC040"
        "50A": "MCHGC050"
        "60A": "MCHGC060"
        "70A": "MCHGC070"
        "80A": "MCHGC080"
        "90A": "MCHGC090"
        "100A": "MCHGC100"
        "110A": "MCHGC110"
        "120A": "MCHGC120"
      statusmap:
        "10": "10A"
        "20": "20A"
        "30": "30A"       
        "40": "40A"
        "50": "50A"
        "60": "60A"
        "70": "70A"
        "80": "80A"
        "90": "90A"
        "100": "100A"
        "110": "110A"
        "120": "120A"
